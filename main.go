// +build ignore

package main

import (
	"bytes"
	"html/template"
	"os"
	"os/exec"
	"strings"
	"time"
)

const DefaultVersion = "0.0.0-unset"
const DefaultCommit = "0000000"

func main() {
	appVersion, appCommit := getRepoVersion()
	if versionFile, err := os.Create("./version.go"); err != nil {
		panic(err)
	} else {
		defer versionFile.Close()
		versionTemplate.Execute(versionFile, struct {
			AppVersion Version
			AppCommit  Commit
			Timestamp  string
		}{
			AppVersion: appVersion,
			AppCommit:  appCommit,
			Timestamp:  time.Now().Format("2006-01-02T15:04:05-0700"),
		})
	}
}

// Version contains the semver version
type Version string

// Commit contains the commit SHA hash
type Commit string

func getRepoVersion() (Version, Commit) {
	_, err := exec.LookPath("git")
	if err != nil {
		panic(err)
		return Version(DefaultVersion), Commit(DefaultCommit)
	}

	var versionOutput bytes.Buffer
	getVersion := exec.Command("git", "describe", "--tags", "--abbrev=0")
	getVersion.Stdout = &versionOutput
	getVersion.Stderr = &versionOutput
	getVersion.Run()

	var commitOutput bytes.Buffer
	getCommit := exec.Command("git", "log", "-n", "1", "--format='%H'")
	getCommit.Stdout = &commitOutput
	getCommit.Stderr = &commitOutput
	getCommit.Run()

	version := strings.Trim(versionOutput.String(), " \n")
	if strings.Contains(version, "fatal") {
		version = DefaultVersion
	}

	commit := strings.Trim(commitOutput.String(), " -'\n")[:7]
	return Version(version), Commit(commit)
}

var versionTemplate = template.Must(template.New("test").Parse(`
// GENERATED FILE - DO NOT MODIFY
// SEE https://github.com/usvc/go-generate-version for more information
//
// GENERATED BY GO:GENERATE AT {{.Timestamp}}
//
// FILE GENERATED USING ~/generators/versioning/main.go

package main

// Version stores the latest git tag
const Version = "{{.AppVersion}}"

// Commit stores the commit SHA hash
const Commit = "{{.AppCommit}}"

`))
